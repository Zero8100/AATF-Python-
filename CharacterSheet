import random


class Character:
    # Initialize Attributes for the main character
    def __init__(self, name, profession):
        self.disadvantage = False
        self.inAFight = False
        self.hasChant = False
        self.hasKnife = False
        self.spellChance = 0
        self.name = name
        self.profession = profession
        # Characteristics
        self.hp = 1
        self.strength = 0
        self.con = 0
        self.size = 0
        self.dex = 0
        self.app = 0
        self.edu = 0
        self.int = 0
        self.pow = 0
        self.sanity = 0
        self.luck = 0
        self.mp = 0
        # Investigator Skills
        self.accounting = 5
        self.anthropology = 1
        self.appraise = 5
        self.archeology = 1
        self.artNCraft = 5
        self.charm = 15
        self.climb = 20
        self.creditRate = 0
        self.cthuluMyth = 0
        self.disguise = 5
        self.dodge = self.dex // 2
        self.driveAuto = 20
        self.elecRepair = 10
        self.fastTalk = 5
        self.fightingBrawl = 25
        self.firearmsHand = 20
        self.firearmsRifle = 25
        self.firstAid = 30
        self.history = 5
        self.intimidate = 15
        self.jump = 20
        self.languageOther = 1
        self.languageOwn = self.edu
        self.law = 5
        self.libraryUse = 20
        self.listen = 20
        self.locksmith = 1
        self.mechRepair = 10
        self.medicine = 1
        self.naturalWorld = 10
        self.navigate = 10
        self.occult = 5
        self.opHvMach = 1
        self.persuade = 1
        self.pilot = 1
        self.psychology = 10
        self.psychoAnalyze = 1
        self.ride = 5
        self.science = 1
        self.sleightOfHand = 10
        self.spotHidden = 25
        self.stealth = 20
        self.survival = 10
        self.swim = 20
        self.throw = 20
        self.throw = 20
        self.track = 10

    # assigns all used story stats and descriptions of the character to a dictionary for quick reference
    # Is initialized in main after assigning profession stats
    def createDict(self):
        # Lists and stores all stats in alphabetical order
        dictionary = {
            "Arch": self.archeology,
            "ArchStr": "Archeology",
            "Con": self.con,
            "ConStr": "Constitution",
            "Disadvantage": self.disadvantage,
            "HasChant": self.hasChant,
            "HasKnife": self.hasKnife,
            "HP": self.hp,
            "HPStr": "HP",
            "inAFight": self.inAFight,
            "Luck": self.luck,
            "LuckStr": "Luck",
            "MP": self.mp,
            "NaturalWorld": self.naturalWorld,
            "NaturalWorldStr": "Natural World",
            "Size": self.size,
            "SizeStr": "Size",
            "SpellChance": self.spellChance,
            "SpotHidden": self.spotHidden,
            "SpotHiddenStr": "Spot Hidden",
            "Strength": self.strength,
            "StrengthStr": "Strength",
        }
        return dictionary

    # Used to assign Professor attributes before entering the dictionary
    def IsProfessor(self):
        # Set Attributes to replace base stats
        self.hp = 1
        self.strength = 40
        self.con = 50
        self.size = 50
        self.dex = 50
        self.app = 60
        self.edu = 70
        self.int = 70
        self.pow = 60
        self.mp = self.pow // 5
        self.sanity = self.pow
        self.dodge = self.dex // 2
        self.hp = (self.size + self.con) // 10
        self.languageOther = 40
        self.languageOwn = 40
        self.libraryUse = 60
        self.psychology = 70
        self.medicine = 40
        self.psychoAnalyze = 50
        self.creditRate = 50

    # Checks Character.profession from Main to assign attributes based on selected profession
    def AssignAttributes(self):
        # Assign Professor Attributes
        if self.profession == "Professor":
            print("...Assigning Professor Attributes...")
            self.IsProfessor()

    # Takes in the dictionary, description of stat for check, the value of the stat for check, and the
    # level of success required
    # 1 = Normal
    # 2 = Hard
    # 3 = Extreme
    def SkillCheck(self, dictionary, desc, value, level):
        # Makes a D100 dice Roll
        diceRoll = random.randint(0, 100)
        # Sets Hard and Extreme Success values
        hardRate = dictionary[value] // 2
        extremeRate = dictionary[value] // 4

        # Adds Disadvantage to the roll if it is enabled
        if dictionary["Disadvantage"] is True:
            diceRoll2 = random.randint(0, 100)
            # Takes Highest of the 2 dice rolls to impose Disadvantage/Penalty
            if diceRoll2 > diceRoll:
                diceRoll = diceRoll2

        print(self.name + "\'s " + dictionary[desc] + " is " + str(dictionary[value]))

        # Normal Check
        if level == 1:
            print("So you need to roll a " + str(dictionary[value]) + " or under to succeed this check")
            input("Press Enter to roll the dice...")

            if diceRoll <= dictionary[value]:
                passOrFail = 1
                levelOfSuccess = "Success"
                if diceRoll <= dictionary[value] // 2:
                    passOrFail = 2
                    levelOfSuccess = "Hard Success"
                elif diceRoll <= dictionary[value] // 4:
                    passOrFail = 3
                    levelOfSuccess = "Extreme Success"

                print("You rolled a " + str(diceRoll) + "! The roll was a " + levelOfSuccess + "!")

            elif diceRoll >= dictionary[value]:
                passOrFail = 4
                print("You rolled a " + str(diceRoll) + "! You have failed the check!")

        # Hard Success Check
        if level == 2:
            print(self.name + " needs a hard success to pass this check.")
            print("So you need to roll a " + str(hardRate) + " or under to succeed this check")
            input("Press Enter to roll the dice...")
            if diceRoll <= dictionary[value]:
                passOrFail = 1
                print("You rolled a " + str(diceRoll) + "! You have failed the check!")
            if diceRoll <= hardRate:
                passOrFail = 2
                levelOfSuccess = "Hard Success"
                print("You rolled a " + str(diceRoll) + "! The roll was a " + levelOfSuccess + "!")
            elif diceRoll <= extremeRate:
                passOrFail = 3
                levelOfSuccess = "Extreme Success"
                print("You rolled a " + str(diceRoll) + "! The roll was a " + levelOfSuccess + "!")
            elif diceRoll >= dictionary[value]:
                passOrFail = 4
                print("You rolled a " + str(diceRoll) + "! You have failed the check!")

        # Extreme Success Check
        if level == 3:
            print(self.name + " needs an extreme success to pass this check.")
            print("So you need to roll a " + str(extremeRate) + " or under to succeed this check")
            input("Press Enter to roll the dice...")
            if diceRoll <= dictionary[value]:
                passOrFail = 1
                print("You rolled a " + str(diceRoll) + "! You have failed the check!")
            if diceRoll <= hardRate:
                passOrFail = 2
                print("You rolled a " + str(diceRoll) + "! You have failed the check!")
            elif diceRoll <= extremeRate:
                passOrFail = 3
                levelOfSuccess = "Extreme Success"
                print("You rolled a " + str(diceRoll) + "! The roll was a " + levelOfSuccess + "!")
            elif diceRoll >= dictionary[value]:
                passOrFail = 4
                print("You rolled a " + str(diceRoll) + "! You have failed the check!")

        input("Press Enter to continue...\n")

        return passOrFail

    def IsDead(self, dictionary, value):
        print("Current HP: " + str(dictionary[value]))
        if dictionary[value] <= 0:
            death = True
        elif dictionary[value] > 0:
            death = False

        return death
